{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA;;;;GAIG","sourcesContent":["/*\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n/// <reference types=\"@capacitor/cli\" />\n\nimport type { PluginListenerHandle } from \"@capacitor/core\";\n\ndeclare module \"@capacitor/cli\" {\n  export interface PluginsConfig {\n    /**\n     * CapacitorUpdater can be configured with these options:\n     */\n    CapacitorUpdater?: {\n      /**\n       * Configure the number of milliseconds the native plugin should wait before considering an update 'failed'.\n       *\n       * Only available for Android and iOS.\n       *\n       * @default 10000 // (10 seconds)\n       * @example 1000 // (1 second)\n       */\n      appReadyTimeout?: number;\n      /**\n       * Configure the number of milliseconds the native plugin should wait before considering API timeout.\n       *\n       * Only available for Android and iOS.\n       *\n       * @default 20 // (20 second)\n       * @example 10 // (10 second)\n       */\n      responseTimeout?: number;\n      /**\n       * Configure whether the plugin should use automatically delete failed bundles.\n       *\n       * Only available for Android and iOS.\n       *\n       * @default true\n       * @example false\n       */\n      autoDeleteFailed?: boolean;\n\n      /**\n       * Configure whether the plugin should use automatically delete previous bundles after a successful update.\n       *\n       * Only available for Android and iOS.\n       *\n       * @default true\n       * @example false\n       */\n      autoDeletePrevious?: boolean;\n\n      /**\n       * Configure whether the plugin should use Auto Update via an update server.\n       *\n       * Only available for Android and iOS.\n       *\n       * @default true\n       * @example false\n       */\n      autoUpdate?: boolean;\n\n\n      /**\n       * Configure whether the plugin should be enabled by default.\n       *\n       * Only available for Android and iOS.\n       *\n       * @default true\n       * @example false\n       */\n      enable?: boolean;\n\n      /**\n       * Automatically delete previous downloaded bundles when a newer native app bundle is installed to the device.\n       *\n       * Only available for Android and iOS.\n       *\n       * @default true\n       * @example false\n       */\n      resetWhenUpdate?: boolean;\n\n      /**\n       * Configure the URL / endpoint to which update checks are sent.\n       *\n       * Only available for Android and iOS.\n       *\n       * @default https://api.capgo.app/auto_update\n       * @example https://example.com/api/auto_update\n       */\n      updateUrl?: string;\n\n      /**\n       * Configure the URL / endpoint to which update statistics are sent.\n       *\n       * Only available for Android and iOS. Set to \"\" to disable stats reporting.\n       *\n       * @default https://api.capgo.app/stats\n       * @example https://example.com/api/stats\n       */\n      statsUrl?: string;\n      /**\n       * Configure the private key for end to end live update encryption.\n       *\n       * Only available for Android and iOS.\n       *\n       * @default undefined\n       */\n      privateKey?: string;\n\n      /**\n       * Configure the current version of the app. This will be used for the first update request.\n       * If not set, the plugin will get the version from the native code.\n       *\n       * Only available for Android and iOS.\n       *\n       * @default undefined\n       * @since  4.17.48\n       */\n      version?: string;\n      /**\n       * Make the plugin direct install the update when the app what just updated/installed. Only for autoUpdate mode.\n       *\n       * Only available for Android and iOS.\n       *\n       * @default undefined\n       * @since  5.1.0\n       */\n      directUpdate?: boolean;\n\n      /**\n       * Configure the delay period for period update check. the unit is in seconds.\n       *\n       * Only available for Android and iOS.\n       * Cannot be less than 600 seconds (10 minutes).\n       *\n       * @default 600 // (10 minutes)\n       */\n      periodCheckDelay?: number;\n\n      /**\n       * Configure the CLI to use a local server for testing or self-hosted update server.\n       *\n       *\n       * @default undefined\n       * @since  4.17.48\n       */\n      localS3?: boolean;\n      /**\n       * Configure the CLI to use a local server for testing or self-hosted update server.\n       *\n       *\n       * @default undefined\n       * @since  4.17.48\n       */\n      localHost?: string;\n      /**\n       * Configure the CLI to use a local server for testing or self-hosted update server.\n       *\n       *\n       * @default undefined\n       * @since  4.17.48\n       */\n      localWebHost?: string;\n      /**\n       * Configure the CLI to use a local server for testing or self-hosted update server.\n       *\n       *\n       * @default undefined\n       * @since  4.17.48\n       */\n      localSupa?: string;\n      /**\n       * Configure the CLI to use a local server for testing.\n       *\n       *\n       * @default undefined\n       * @since  4.17.48\n       */\n      localSupaAnon?: string;\n\n      /**\n       * Allow the plugin to modify the updateUrl, statsUrl and channelUrl dynamically from the JavaScript side.\n       *\n       *\n       * @default false\n       * @since  5.4.0\n       */\n      allowModifyUrl?: boolean;\n\n      /**\n       * Set the default channel for the app in the config.\n       *\n       *\n       *\n       * @default undefined\n       * @since  5.5.0\n       */\n      defaultChannel?: string;\n    };\n  }\n}\n\nexport interface CapacitorUpdaterPlugin {\n  /**\n   * Notify Capacitor Updater that the current bundle is working (a rollback will occur if this method is not called on every app launch)\n   * By default this method should be called in the first 10 sec after app launch, otherwise a rollback will occur.\n   * Change this behaviour with {@link appReadyTimeout}\n   *\n   * @returns {Promise<AppReadyResult>} an Promise resolved directly\n   * @throws {Error}\n   */\n  notifyAppReady(): Promise<AppReadyResult>;\n\n  /**\n   * Set the updateUrl for the app, this will be used to check for updates.\n   *\n   * @param options contains the URL to use for checking for updates.\n   * @returns {Promise<void>}\n   * @throws {Error}\n   * @since 5.4.0\n   */\n  setUpdateUrl(options: UpdateUrl): Promise<void>;\n\n  /**\n   * Set the statsUrl for the app, this will be used to send statistics. Passing an empty string will disable statistics gathering.\n   *\n   * @param options contains the URL to use for sending statistics.\n   * @returns {Promise<void>}\n   * @throws {Error}\n   * @since 5.4.0\n   */\n  setStatsUrl(options: StatsUrl): Promise<void>;\n\n  /**\n   * Set the channelUrl for the app, this will be used to set the channel.\n   *\n   * @param options contains the URL to use for setting the channel.\n   * @returns {Promise<void>}\n   * @throws {Error}\n   * @since 5.4.0\n   */\n  setChannelUrl(options: ChannelUrl): Promise<void>;\n\n  /**\n   * Download a new bundle from the provided URL, it should be a zip file, with files inside or with a unique id inside with all your files\n   *\n   * @example const bundle = await CapacitorUpdater.download({ url: `https://example.com/versions/${version}/dist.zip`, version });\n   * @returns {Promise<BundleInfo>} The {@link BundleInfo} for the specified bundle.\n   * @param options The {@link DownloadOptions} for downloading a new bundle zip.\n   */\n  download(options: DownloadOptions): Promise<BundleInfo>;\n\n  /**\n   * Set the next bundle to be used when the app is reloaded.\n   *\n   * @param options Contains the ID of the next Bundle to set on next app launch. {@link BundleInfo.id}\n   * @returns {Promise<BundleInfo>} The {@link BundleInfo} for the specified bundle id.\n   * @throws {Error} When there is no index.html file inside the bundle folder.\n   */\n  next(options: BundleId): Promise<BundleInfo>;\n\n  /**\n   * Set the current bundle and immediately reloads the app.\n   *\n   * @param options A {@link BundleId} object containing the new bundle id to set as current.\n   * @returns {Promise<void>}\n   * @throws {Error} When there are is no index.html file inside the bundle folder.\n   */\n  set(options: BundleId): Promise<void>;\n\n  /**\n   * Deletes the specified bundle from the native app storage. Use with {@link list} to get the stored Bundle IDs.\n   *\n   * @param options A {@link BundleId} object containing the ID of a bundle to delete (note, this is the bundle id, NOT the version name)\n   * @returns {Promise<void>} When the bundle is deleted\n   * @throws {Error}\n   */\n  delete(options: BundleId): Promise<void>;\n\n  /**\n   * Get all locally downloaded bundles in your app\n   *\n   * @returns {Promise<BundleListResult>} A Promise containing the {@link BundleListResult.bundles}\n   * @throws {Error}\n   */\n  list(): Promise<BundleListResult>;\n\n  /**\n   * Reset the app to the `builtin` bundle (the one sent to Apple App Store / Google Play Store ) or the last successfully loaded bundle.\n   *\n   * @param options Containing {@link ResetOptions.toLastSuccessful}, `true` resets to the builtin bundle and `false` will reset to the last successfully loaded bundle.\n   * @returns {Promise<void>}\n   * @throws {Error}\n   */\n  reset(options?: ResetOptions): Promise<void>;\n\n  /**\n   * Get the current bundle, if none are set it returns `builtin`. currentNative is the original bundle installed on the device\n   *\n   * @returns {Promise<CurrentBundleResult>} A Promise evaluating to the {@link CurrentBundleResult}\n   * @throws {Error}\n   */\n  current(): Promise<CurrentBundleResult>;\n\n  /**\n   * Reload the view\n   *\n   * @returns {Promise<void>} A Promise which is resolved when the view is reloaded\n   * @throws {Error}\n   */\n  reload(): Promise<void>;\n\n  /**\n   * Sets a {@link DelayCondition} array containing conditions that the Plugin will use to determine when to install updates.\n   *\n   * @example\n   * // Install the update after the user kills the app or after a background of 300000 ms (5 minutes)\n   * await CapacitorUpdater.setMultiDelay({ delayConditions: [{ kind: 'kill' }, { kind: 'background', value: '300000' }] })\n   * @example\n   * // Install the update after the specific iso8601 date is expired\n   * await CapacitorUpdater.setMultiDelay({ delayConditions: [{ kind: 'date', value: '2022-09-14T06:14:11.920Z' }] })\n   * @example\n   * // Install the update after the first background (default behaviour without setting delay)\n   * await CapacitorUpdater.setMultiDelay({ delayConditions: [{ kind: 'background' }] })\n   * @param options Containing the {@link MultiDelayConditions} array of conditions to set\n   * @returns {Promise<void>}\n   * @throws {Error}\n   * @since 4.3.0\n   */\n  setMultiDelay(options: MultiDelayConditions): Promise<void>;\n\n  /**\n   * Cancels a {@link DelayCondition} to process an update immediately.\n   *\n   * @returns {Promise<void>}\n   * @throws {Error}\n   * @since 4.0.0\n   */\n  cancelDelay(): Promise<void>;\n\n  /**\n   * Get Latest bundle available from update Url\n   *\n   * @returns {Promise<LatestVersion>} A Promise resolved when url is loaded\n   * @throws {Error}\n   * @since 4.0.0\n   */\n  getLatest(): Promise<LatestVersion>;\n\n  /**\n   * Sets the channel for this device. The channel has to allow for self assignment for this to work.\n   * Do not use this method to set the channel at boot when `autoUpdate` is enabled in the {@link PluginsConfig}.\n   * This method is to set the channel after the app is ready.\n   *\n   * @param options Is the {@link SetChannelOptions} channel to set\n   * @returns {Promise<ChannelRes>} A Promise which is resolved when the new channel is set\n   * @throws {Error}\n   * @since 4.7.0\n   */\n  setChannel(options: SetChannelOptions): Promise<ChannelRes>;\n\n  /**\n   * Unset the channel for this device. The device will then return to the default channel\n   *\n   * @returns {Promise<ChannelRes>} A Promise resolved when channel is set\n   * @throws {Error}\n   * @since 4.7.0\n   */\n  unsetChannel(options: UnsetChannelOptions): Promise<void>;\n\n  /**\n   * Get the channel for this device\n   *\n   * @returns {Promise<ChannelRes>} A Promise that resolves with the channel info\n   * @throws {Error}\n   * @since 4.8.0\n   */\n  getChannel(): Promise<GetChannelRes>;\n\n  /**\n   * Set a custom ID for this device\n   *\n   * @param options is the {@link SetCustomIdOptions} customId to set\n   * @returns {Promise<void>} an Promise resolved instantly\n   * @throws {Error}\n   * @since 4.9.0\n   */\n  setCustomId(options: SetCustomIdOptions): Promise<void>;\n\n  /**\n   * Get the native app version or the builtin version if set in config\n   *\n   * @returns {Promise<BuiltinVersion>} A Promise with version for this device\n   * @since 5.2.0\n   */\n  getBuiltinVersion(): Promise<BuiltinVersion>;\n\n  /**\n   * Get unique ID used to identify device (sent to auto update server)\n   *\n   * @returns {Promise<DeviceId>} A Promise with id for this device\n   * @throws {Error}\n   */\n  getDeviceId(): Promise<DeviceId>;\n\n  /**\n   * Get the native Capacitor Updater plugin version (sent to auto update server)\n   *\n   * @returns {Promise<PluginVersion>} A Promise with Plugin version\n   * @throws {Error}\n   */\n  getPluginVersion(): Promise<PluginVersion>;\n\n  /**\n   * Get the state of auto update config.\n   *\n   * @returns {Promise<AutoUpdateEnabled>} The status for auto update. Evaluates to `false` in manual mode.\n   * @throws {Error}\n   */\n  isAutoUpdateEnabled(): Promise<AutoUpdateEnabled>;\n  \n  /**\n   * Enables the native Capacitor Updater plugin\n   */\n  enable(): void;\n\n  /**\n   * Disables the native Capacitor Updater plugin\n   */\n  disable(): void;\n\n  /**\n   * Remove all listeners for this plugin.\n   *\n   * @since 1.0.0\n   */\n  removeAllListeners(): Promise<void>;\n\n  /**\n   * Listen for bundle download event in the App. Fires once a download has started, during downloading and when finished.\n   *\n   * @since 2.0.11\n   */\n  addListener(\n    eventName: \"download\",\n    listenerFunc: (state: DownloadEvent) => void\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Listen for no need to update event, useful when you want force check every time the app is launched\n   *\n   * @since 4.0.0\n   */\n  addListener(\n    eventName: \"noNeedUpdate\",\n    listenerFunc: (state: NoNeedEvent) => void\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Listen for available update event, useful when you want to force check every time the app is launched\n   *\n   * @since 4.0.0\n   */\n  addListener(\n    eventName: \"updateAvailable\",\n    listenerFunc: (state: UpdateAvailableEvent) => void\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Listen for downloadComplete events.\n   *\n   * @since 4.0.0\n   */\n  addListener(\n    eventName: \"downloadComplete\",\n    listenerFunc: (state: DownloadCompleteEvent) => void\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Listen for Major update event in the App, let you know when major update is blocked by setting disableAutoUpdateBreaking\n   *\n   * @since 2.3.0\n   */\n  addListener(\n    eventName: \"majorAvailable\",\n    listenerFunc: (state: MajorAvailableEvent) => void\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Listen for update fail event in the App, let you know when update has fail to install at next app start\n   *\n   * @since 2.3.0\n   */\n  addListener(\n    eventName: \"updateFailed\",\n    listenerFunc: (state: UpdateFailedEvent) => void\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Listen for download fail event in the App, let you know when a bundle download has failed\n   *\n   * @since 4.0.0\n   */\n  addListener(\n    eventName: \"downloadFailed\",\n    listenerFunc: (state: DownloadFailedEvent) => void\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   *  Listen for reload event in the App, let you know when reload has happened\n   *\n   * @since 4.3.0\n   */\n  addListener(\n    eventName: \"appReloaded\",\n    listenerFunc: () => void\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Listen for app ready event in the App, let you know when app is ready to use\n   *\n   * @since 5.1.0\n   */\n  addListener(\n    eventName: \"appReady\",\n    listenerFunc: (state: AppReadyEvent) => void\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n}\n\nexport type BundleStatus = \"success\" | \"error\" | \"pending\" | \"downloading\";\n\nexport type DelayUntilNext = \"background\" | \"kill\" | \"nativeVersion\" | \"date\";\n\nexport interface NoNeedEvent {\n  /**\n   * Current status of download, between 0 and 100.\n   *\n   * @since  4.0.0\n   */\n  bundle: BundleInfo;\n}\n\nexport interface UpdateAvailableEvent {\n  /**\n   * Current status of download, between 0 and 100.\n   *\n   * @since  4.0.0\n   */\n  bundle: BundleInfo;\n}\n\nexport interface ChannelRes {\n  /**\n   * Current status of set channel\n   *\n   * @since  4.7.0\n   */\n  status: string;\n  error?: any;\n  message?: any;\n}\n\nexport interface GetChannelRes {\n  /**\n   * Current status of get channel\n   *\n   * @since  4.8.0\n   */\n  channel?: string;\n  error?: any;\n  message?: any;\n  status?: string;\n  allowSet?: boolean;\n}\n\nexport interface DownloadEvent {\n  /**\n   * Current status of download, between 0 and 100.\n   *\n   * @since  4.0.0\n   */\n  percent: number;\n  bundle: BundleInfo;\n}\n\nexport interface MajorAvailableEvent {\n  /**\n   * Emit when a new major bundle is available.\n   *\n   * @since  4.0.0\n   */\n  version: string;\n}\n\nexport interface DownloadFailedEvent {\n  /**\n   * Emit when a download fail.\n   *\n   * @since  4.0.0\n   */\n  version: string;\n}\n\nexport interface DownloadCompleteEvent {\n  /**\n   * Emit when a new update is available.\n   *\n   * @since  4.0.0\n   */\n  bundle: BundleInfo;\n}\n\nexport interface UpdateFailedEvent {\n  /**\n   * Emit when a update failed to install.\n   *\n   * @since 4.0.0\n   */\n  bundle: BundleInfo;\n}\n\nexport interface AppReadyEvent {\n  /**\n   * Emitted when the app is ready to use.\n   *\n   * @since  5.2.0\n   */\n  bundle: BundleInfo;\n  status: string;\n}\n\nexport interface LatestVersion {\n  /**\n   * Result of getLatest method\n   *\n   * @since 4.0.0\n   */\n  version: string;\n  major?: boolean;\n  message?: string;\n  sessionKey?: string;\n  error?: string;\n  old?: string;\n  url?: string;\n}\n\nexport interface BundleInfo {\n  id: string;\n  version: string;\n  downloaded: string;\n  checksum: string;\n  status: BundleStatus;\n}\n\nexport interface SetChannelOptions {\n  channel: string;\n  triggerAutoUpdate?: boolean;\n}\n\nexport interface UnsetChannelOptions {\n  triggerAutoUpdate?: boolean;\n}\n\nexport interface SetCustomIdOptions {\n  customId: string;\n}\n\nexport interface DelayCondition {\n  /**\n   * Set up delay conditions in setMultiDelay\n   * @param value is useless for @param kind \"kill\", optional for \"background\" (default value: \"0\") and required for \"nativeVersion\" and \"date\"\n   */\n  kind: DelayUntilNext;\n  value?: string;\n}\n\nexport interface AppReadyResult {\n  bundle: BundleInfo;\n}\n\nexport interface UpdateUrl {\n  url: string;\n}\n\nexport interface StatsUrl {\n  url: string;\n}\n\nexport interface ChannelUrl {\n  url: string;\n}\n\nexport interface DownloadOptions {\n  /**\n   * The URL of the bundle zip file (e.g: dist.zip) to be downloaded. (This can be any URL. E.g: Amazon S3, a GitHub tag, any other place you've hosted your bundle.)\n   */\n  url: string;\n\n  /**\n   * The version code/name of this bundle/version\n   */\n  version: string;\n  sessionKey?: string;\n  checksum?: string;\n}\n\nexport interface BundleId {\n  id: string;\n}\n\nexport interface BundleListResult {\n  bundles: BundleInfo[];\n}\n\nexport interface ResetOptions {\n  toLastSuccessful: boolean;\n}\n\nexport interface CurrentBundleResult {\n  bundle: BundleInfo;\n  native: string;\n}\n\nexport interface MultiDelayConditions {\n  delayConditions: DelayCondition[];\n}\n\nexport interface BuiltinVersion {\n  version: string;\n}\n\nexport interface DeviceId {\n  deviceId: string;\n}\n\nexport interface PluginVersion {\n  version: string;\n}\n\nexport interface AutoUpdateEnabled {\n  enabled: boolean;\n}\n"]}